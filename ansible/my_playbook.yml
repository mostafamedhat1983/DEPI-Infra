# -------------------- Install and configure Jenkins --------------------

- name: Install and configure Jenkins
  hosts: jenkins_server            #jenkins_servers group from the inventory file.
  become: yes                       #Run tasks with elevated privileges (root)
  become_method: sudo               #Specifies using sudo for privilege escalation
  become_user: root                 

  tasks:
    - name: Install Java 17 (OpenJDK)  # Jenkins requires Java 17+
      apt:
        name: openjdk-17-jdk
        state: present                 #Ensures Java is installed
        update_cache: yes              #Updates the package list before installing.

    - name: Install required dependencies for Jenkins  # Essential packages for Jenkins
      apt:
        name: "{{ item }}"
        state: present 
      loop:                                #Run the task for each item in the list
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common

    - name: Download Jenkins GPG key      #Securely downloads the Jenkins repository key.
      shell: |
        curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null

    - name: Add Jenkins repository        #Adds Jenkins' official repository
      shell: |
        echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian binary/" | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null

    - name: Install Jenkins  # Installs Jenkins package
      apt:
        name: jenkins
        state: present
        update_cache: yes

    - name: Start and enable Jenkins service  # Ensures Jenkins runs on boot
      service:
        name: jenkins
        state: started
        enabled: yes

    - name: Get the Jenkins initial admin password
      command: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: jenkins_admin_password
      changed_when: false
      ignore_errors: yes

    - name: Display Jenkins initial admin password (if available)
      debug:
        msg: "Jenkins initial admin password: {{ jenkins_admin_password.stdout | default('Not found. Jenkins might be configured already.') }}"


# -------------------- Install Docker --------------------

- name: Install Docker
  hosts: jenkins_server
  become: yes
  become_method: sudo
  become_user: root

  tasks:
    - name: Install Docker dependencies  # Required dependencies for Docker
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - gnupg

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key  # Adds Docker security key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository  # Adds Docker repo to the system
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu noble stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Docker packages  # Installs Docker packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin

    - name: Start and enable Docker service  # Ensures Docker runs on boot
      service:
        name: docker
        state: started
        enabled: yes

# -------------------- Install kubectl --------------------

- name: Install kubectl
  hosts: jenkins_server
  become: yes
  become_method: sudo
  become_user: root

  tasks:
    - name: Download and install kubectl  # Installs the Kubernetes CLI tool
      get_url:
        url: "https://dl.k8s.io/release/v1.24.0/bin/linux/amd64/kubectl"
        dest: "/usr/local/bin/kubectl"
        mode: '0755'

# -------------------- Install AWS CLI --------------------

- name: Install AWS CLI
  hosts: jenkins_server
  become: yes
  become_method: sudo
  become_user: root
  vars_files:
    - secrets.yml  # Include the encrypted secrets file

  tasks:
    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - unzip
        - python3-pip
        - python3-setuptools

    - name: Check if AWS CLI is already installed
      command: aws --version
      register: aws_version
      ignore_errors: yes
      changed_when: false

    - name: Download AWS CLI installer
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: "/tmp/awscliv2.zip"
        mode: '0644'
      when: aws_version.rc != 0

    - name: Create directory for AWS CLI
      file:
        path: "/tmp/aws-cli"
        state: directory
        mode: '0755'
      when: aws_version.rc != 0

    - name: Extract AWS CLI installer
      unarchive:
        src: "/tmp/awscliv2.zip"
        dest: "/tmp/aws-cli"
        remote_src: yes
      when: aws_version.rc != 0

    - name: Install AWS CLI
      command: "/tmp/aws-cli/aws/install"
      when: aws_version.rc != 0

    - name: Clean up installation files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/awscliv2.zip"
        - "/tmp/aws-cli"
      when: aws_version.rc != 0

    - name: Verify AWS CLI installation
      command: aws --version
      register: aws_version_check
      changed_when: false

    - name: Display AWS CLI version
      debug:
        var: aws_version_check.stdout

    - name: Create AWS config directory
      file:
        path: "~/.aws"
        state: directory
        mode: '0755'
      become: no

    - name: Configure AWS CLI credentials
      copy:
        content: |
          [default]
          aws_access_key_id={{ aws_access_key }}
          aws_secret_access_key={{ aws_secret_key }}
          region={{ aws_region }}
        dest: "~/.aws/credentials"
        mode: '0600'
      become: no


# -------------------- Register EKS server --------------------
- name: Update EKS kubeconfig
  hosts: jenkins_server
  
  tasks:
    - name: Run update-kubeconfig command
      command: aws eks update-kubeconfig --name python-app-cluster --region us-west-2 

# -------------------- Verify Jenkins, Docker, and kubectl --------------------

- name: Verify Jenkins, Docker, and kubectl
  hosts: all
  become: yes

  tasks:
    # Check Docker Version
    - name: Check Docker Version
      command: docker --version
      register: docker_version
      changed_when: false

    - debug:
        msg: "Docker Installed: {{ docker_version.stdout }}"

    # Check if Docker Service is Running
    - name: Check if Docker Service is Running
      systemd:
        name: docker
        state: started
      register: docker_status

    - debug:
        msg: "Docker Service is {{ docker_status.status.ActiveState }}"

    # Check kubectl Version
    - name: Check kubectl Version
      command: kubectl version --client
      register: kubectl_version
      changed_when: false

    - debug:
        msg: "kubectl Installed: {{ kubectl_version.stdout }}"

    # Check if Jenkins is Running
    - name: Check if Jenkins Service is Running
      systemd:
        name: jenkins
        state: started
      register: jenkins_status

    - debug:
        msg: "Jenkins Service is {{ jenkins_status.status.ActiveState }}"

    # Get Jenkins Initial Admin Password (if needed)
    - name: Get Jenkins Initial Admin Password
      command: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: jenkins_admin_password
      changed_when: false
      ignore_errors: yes  # In case it's already configured

    - debug:
        msg: "Jenkins Initial Admin Password: {{ jenkins_admin_password.stdout }}"
      when: jenkins_admin_password.stdout is defined

